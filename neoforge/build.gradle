plugins {
	id "net.neoforged.gradle.userdev"
	id "info.u_team.gradle_files"
	id "info.u_team.curse_gradle_uploader"
	id "maven-publish"
}

gradlefiles.loaderSuffix = "neoforge"

group = rootProject.group
base.archivesName = gradlefiles.archivesName()
version = gradlefiles.version()

sourceSets {
	main {
		java {
			srcDirs += "src/api/java"
			srcDirs += gradlefiles.project("common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += gradlefiles.project("common").sourceSets.common.resources.srcDirs
		}
	}
	data {
		java
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
	multiloader_test_mod {
		java {
			srcDirs += gradlefiles.project("common").sourceSets.common_multiloader_test_mod.java.srcDirs
		}
		resources {
			srcDirs += gradlefiles.project("common").sourceSets.common_multiloader_test_mod.resources.srcDirs
			srcDirs += "src/neoforge_data_multiloader_test_mod/resources"
		}
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
	data_multiloader_test_mod {
		java
		compileClasspath += multiloader_test_mod.compileClasspath + multiloader_test_mod.output
		runtimeClasspath += multiloader_test_mod.runtimeClasspath
	}
	neoforge_data_multiloader_test_mod {
		java
		resources
		compileClasspath += multiloader_test_mod.compileClasspath + multiloader_test_mod.output
		runtimeClasspath += multiloader_test_mod.runtimeClasspath
	}
	test_mod {
		java {
			srcDirs += "src/data_test_mod/java"
			srcDirs += "src/integration_test_mod/java"
		}
		resources {
			srcDirs += "src/generated_test_mod/resources"
		}
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	accessTransformers {
		file("src/main/resources/META-INF/accesstransformer.cfg")
	}
}

subsystems {
	parchment {
		minecraftVersion = config.neoforge.parchment.minecraft_version
		mappingsVersion = config.neoforge.parchment.version
	}
}

runs {
	sourceSets.main.runs.modIdentifier = config.mod.modid
	sourceSets.data.runs.modIdentifier = config.mod.modid
	
	sourceSets.multiloader_test_mod.runs.modIdentifier = "uteamtest_multiloader"
	sourceSets.data_multiloader_test_mod.runs.modIdentifier = "uteamtest_multiloader"
	sourceSets.neoforge_data_multiloader_test_mod.runs.modIdentifier = "uteamtest_multiloader"
	
	sourceSets.test_mod.runs.modIdentifier = "uteamtest"
	
	configureEach {
		jvmArguments "-Dmixin.debug.verbose=true"
		jvmArguments "-Dmixin.debug.export=true"
	}
	
	client {
		workingDirectory file("run/client").with { mkdirs(); it }
		
		modSources sourceSets.main
		modSources sourceSets.multiloader_test_mod
		modSources sourceSets.test_mod
	}
	
	server {
		workingDirectory file("run/server").with { mkdirs(); it }
		
		modSources sourceSets.main
		modSources sourceSets.multiloader_test_mod
		modSources sourceSets.test_mod
	}
	
	data {
		workingDirectory file("run/data").with { mkdirs(); it }
		
		programArguments "--mod", config.mod.modid
		programArguments "--all"
		programArguments "--output", gradlefiles.project("common").file("src/common_generated/resources").absolutePath
		programArguments "--validate"
		programArguments "--existing", gradlefiles.project("common").file("src/common/resources").absolutePath
		
		systemProperties "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
		systemProperties "coremod.uteamcore.dataprovider-set-indent.value", "true"
		
		modSources sourceSets.main
		modSources sourceSets.data
	}
	
	data_multiloader_test {
		configure("data")
		
		workingDirectory file("run/data").with { mkdirs(); it }
		
		programArguments "--mod", "uteamtest_multiloader"
		programArguments "--all"
		programArguments "--output", gradlefiles.project("common").file("src/common_generated_multiloader_test_mod/resources").absolutePath
		programArguments "--validate"
		programArguments "--existing", gradlefiles.project("common").file("src/common_multiloader_test_mod/resources").absolutePath
		programArguments "--existing-mod", "uteamcore"
		
		systemProperties "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
		systemProperties "coremod.uteamcore.dataprovider-set-indent.value", "true"
		
		modSources sourceSets.main
		modSources sourceSets.multiloader_test_mod
		modSources sourceSets.data_multiloader_test_mod
	}
	
	neoforge_data_multiloader_test {
		configure("data")
		
		workingDirectory file("run/data").with { mkdirs(); it }
		
		programArguments "--mod", "uteamtest_multiloader"
		programArguments "--all"
		programArguments "--output", file("src/neoforge_data_multiloader_test_mod/resources").absolutePath
		programArguments "--validate"
		programArguments "--existing", gradlefiles.project("common").file("src/common_multiloader_test_mod/resources").absolutePath
		programArguments "--existing-mod", "uteamcore"
		
		systemProperties "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
		systemProperties "coremod.uteamcore.dataprovider-set-indent.value", "true"
		
		modSources sourceSets.main
		modSources sourceSets.multiloader_test_mod
		modSources sourceSets.neoforge_data_multiloader_test_mod
	}
	
	data_test_mod {
		configure("data")
		
		workingDirectory file("run/data").with { mkdirs(); it }
		
		programArguments "--mod", "uteamtest"
		programArguments "--all"
		programArguments "--output", file("src/generated_test_mod/resources").absolutePath
		programArguments "--validate"
		programArguments "--existing", file("src/test_mod/resources").absolutePath
		programArguments "--existing-mod", "uteamcore"
		
		systemProperties "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
		systemProperties "coremod.uteamcore.dataprovider-set-indent.value", "true"
		
		modSources sourceSets.main
		modSources sourceSets.test_mod
	}
}

tasks.register("multiLoaderTestJar", Jar) {
	archiveClassifier = "multiloader_test"
	
	from sourceSets.multiloader_test_mod.output
}

tasks.register("multiLoaderTestSourcesJar", Jar) {
	archiveClassifier = "multiloader_testsources"
	
	from sourceSets.multiloader_test_mod.allJava
}

tasks.register("testJar", Jar) {
	archiveClassifier = "test"
	
	from sourceSets.test_mod.output
}

tasks.register("testSourcesJar", Jar) {
	archiveClassifier = "testsources"
	
	from sourceSets.test_mod.allJava
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

signjar.sign(tasks.named("jar"))
signjar.sign(tasks.named("multiLoaderTestJar"))
signjar.sign(tasks.named("testJar"))

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

dependencies {
	implementation gradlefiles.neoForgeDependency()
}

curseforge {
	apiKey = defaultPropertyValue("curseforge.token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.minecraft.version
		addGameVersion "NeoForge"
		addGameVersion "Java 17"
		
		relations {
			optionalDependency "basic-discord-rich-presence"
			optionalDependency "jei"
		}
		
		mainArtifact(tasks.named("jar")) {
			displayName = "${config.curse.display}-NeoForge-${config.minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${gradlefiles.changelogUrl()}\">Changelog of ${project.version}</a>"
		}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.base.archivesName.get()
			
			from gradlefiles.filteredJavaComponent()
			artifact tasks.named("multiLoaderTestJar")
			artifact tasks.named("multiLoaderTestSourcesJar")
			artifact tasks.named("testJar")
			artifact tasks.named("testSourcesJar")
			
			pom {
				name = project.base.archivesName.get()
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
					developer {
						name = "MrTroble"
					}
				}
			}
		}
	}
}
