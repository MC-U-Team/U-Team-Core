plugins {
	id "net.minecraftforge.gradle"
	id "org.parchmentmc.librarian.forgegradle"
	id "org.spongepowered.mixin"
	id "info.u_team.gradle_files"
	id "me.modmuss50.mod-publish-plugin"
	id "maven-publish"
}

gradlefiles.loaderSuffix = "forge"

group = rootProject.group
base.archivesName = gradlefiles.archivesName()
version = gradlefiles.version()

sourceSets {
	main {
		java {
			srcDirs += "src/data/java"
			srcDirs += "src/api/java"
			srcDirs += "src/integration/java"
			srcDirs += gradlefiles.project("common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += gradlefiles.project("common").sourceSets.common.resources.srcDirs
		}
	}
	test_mod {
		java {
			srcDirs += "src/data_test_mod/java"
			srcDirs += "src/integration_test_mod/java"
		}
		resources {
			srcDirs += "src/generated_test_mod/resources"
		}
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
	multiloader_test_mod {
		java {
			srcDirs += gradlefiles.project("common").sourceSets."common-multiloader_test_mod".java.srcDirs
			srcDirs += "src/data_multiloader_test_mod/java"
		}
		resources {
			srcDirs += gradlefiles.project("common").sourceSets."common-multiloader_test_mod".resources.srcDirs
		}
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client {
			workingDirectory file("run/client")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest {
					source sourceSets.test_mod
				}
				
				uteamtest_multiloader {
					source sourceSets.multiloader_test_mod
				}
			}
		}
		
		server {
			workingDirectory file("run/server")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest {
					source sourceSets.test_mod
				}
				
				uteamtest_multiloader {
					source sourceSets.multiloader_test_mod
				}
			}
		}
		data {
			workingDirectory file("run/data")
			
			args "--mod", config.mod.modid
			args "--all"
			args "--output", gradlefiles.project("common").file("src/common-generated/resources")
			args "--validate"
			args "--existing", gradlefiles.project("common").file("src/common/resources")
			
			property "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
			property "coremod.uteamcore.dataprovider-set-indent.value", "true"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		
		data_test {
			workingDirectory file("run/data")
			
			setParents(data.getParents())
			
			args "--mod", "uteamtest"
			args "--all"
			args "--output", file("src/generated_test_mod/resources")
			args "--validate"
			args "--existing", file("src/test_mod/resources")
			args "--existing-mod", "uteamcore"
			
			property "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
			property "coremod.uteamcore.dataprovider-set-indent.value", "true"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest {
					source sourceSets.test_mod
				}
			}
		}
		
		data_multiloader_test {
			workingDirectory file("run/data")
			
			setParents(data.getParents())
			
			args "--mod", "uteamtest_multiloader"
			args "--all"
			args "--output", gradlefiles.project("common").file("src/common-generated_multiloader_test_mod/resources")
			args "--validate"
			args "--existing", gradlefiles.project("common").file("src/common-multiloader_test_mod/resources")
			args "--existing-mod", "uteamcore"
			
			property "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
			property "coremod.uteamcore.dataprovider-set-indent.value", "true"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest_multiloader {
					source sourceSets.multiloader_test_mod
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "uteamcore.mixins.refmap.json"
	config "uteamcore.mixins.json"
	
	debug.verbose = true
	debug.export = true
}

tasks.register("testJar", Jar) {
	archiveClassifier = "test"
	
	from sourceSets.test_mod.output
}

tasks.register("testSourcesJar", Jar) {
	archiveClassifier = "testsources"
	
	from sourceSets.test_mod.allJava
}

tasks.register("multiLoaderTestJar", Jar) {
	archiveClassifier = "multiloader_test"
	
	from sourceSets.multiloader_test_mod.output
}

tasks.register("multiLoaderTestSourcesJar", Jar) {
	archiveClassifier = "multiloader_testsources"
	
	from sourceSets.multiloader_test_mod.allJava
}

reobf.create("testJar") {
	dependsOn tasks.named("reobfJar")
}

reobf.create("multiLoaderTestJar") {
	dependsOn tasks.named("reobfJar")
}

tasks.named("reobfTestJar").configure {
	libraries.from(tasks.named("reobfJar").get().input)
}

tasks.named("reobfMultiLoaderTestJar").configure {
	libraries.from(tasks.named("reobfJar").get().input)
}

// Skip mixin gradle for our test jars
tasks.withType(org.spongepowered.asm.gradle.plugins.MixinExtension$AddMixinsToJarTask).configureEach { task ->
	if(task.name.endsWith("TestJar") || task.name.endsWith("TestSourcesJar")) {
		task.enabled = false
	}
}

tasks.withType(org.spongepowered.asm.gradle.plugins.MixinExtension$ConfigureReobfTask).configureEach { task ->
	if(task.name.endsWith("TestJar")) {
		task.enabled = false
	}
}

gradlefiles.allBuildingDependOn(tasks.named("reobfTestJar"), tasks.named("testSourcesJar"))
gradlefiles.allBuildingDependOn(tasks.named("reobfMultiLoaderTestJar"), tasks.named("multiLoaderTestSourcesJar"))

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

signjar.sign(tasks.named("reobfJar"))
signjar.sign(tasks.named("reobfTestJar"))
signjar.sign(tasks.named("reobfMultiLoaderTestJar"))

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

repositories {
	maven {
		url = "https://maven.blamejared.com"
	}
}

dependencies {
	minecraft gradlefiles.forgeDependency()
	
	implementation fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge:${config.jei.version}")
	
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

publishMods {
	file = tasks.named("jar").flatMap { jar -> jar.archiveFile }
	displayName = "${config.publish.display}-Forge-${config.minecraft.version}-${project.version}"
	changelog = "[Changelog for version ${project.version}](${gradlefiles.changelogUrl()})"
	type = me.modmuss50.mpp.ReleaseType.of(config.publish.type)
	modLoaders.add("forge")
	
	curseforge {
		accessToken = defaultPropertyValue("curseforge.token")
		
		projectId = config.curse.id
		projectSlug = config.curse.slug
		minecraftVersions.add(config.minecraft.version)
		javaVersions.add(JavaVersion.VERSION_17)
		
		optional("basic-discord-rich-presence")
		optional("jei")
	}
	
	modrinth {
		accessToken = defaultPropertyValue("modrinth.token")
		
		projectId = config.modrinth.id
		minecraftVersions.add(config.minecraft.version)
		
		optional("jei")
	}
	
	discord {
		webhookUrl = defaultPropertyValue("discord.update_webhook")
		
		username = "Mod Update"
		avatarUrl = "https://raw.githubusercontent.com/MC-U-Team/U-Team-Core/${config.github.branch}/logo.png"
		
		content = changelog.map { log -> "# ${config.publish.display} (Forge)\n" + log}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.base.archivesName.get()
			
			from gradlefiles.filteredJavaComponent()
			artifact tasks.named("multiLoaderTestJar")
			artifact tasks.named("multiLoaderTestSourcesJar")
			artifact tasks.named("testJar")
			artifact tasks.named("testSourcesJar")
			
			pom {
				name = project.base.archivesName.get()
				rootProject.commonPom(it)
			}
		}
	}
}