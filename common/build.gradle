plugins {
	id "fabric-loom"
	id "info.u_team.gradle_files"
	id "maven-publish"
}

gradlefiles.loaderSuffix = "common"

group = rootProject.group
base.archivesName = gradlefiles.archivesName()
version = gradlefiles.version()

sourceSets {
	common {
		java {
			srcDirs += "src/common-api/java"
			srcDirs += "src/common-integration/java"
		}
		resources {
			srcDirs += "src/common-generated/resources"
		}
	}
	main {
		java {
			srcDirs += sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += sourceSets.common.resources.srcDirs
		}
	}
	"common-multiloader_test_mod" {
		java
		resources {
			srcDirs += "src/common-generated_multiloader_test_mod/resources"
		}
		compileClasspath += main.runtimeClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

loom {
	accessWidenerPath = gradlefiles.project("fabric").file("src/main/resources/uteamcore.accesswidener")
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
	
	manifest {
		attributes("Fabric-Loom-Remap": "true")
	}
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

signjar.sign(tasks.named("remapJar"))

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

repositories {
	maven {
		url = "https://maven.parchmentmc.org"
	}
	maven {
		url = "https://maven.blamejared.com"
	}
}

dependencies {
	minecraft gradlefiles.fabricMinecraftDependency()
	mappings loom.layered() {
		officialMojangMappings()
		parchment(config.fabric.mapping_layer)
	}
	
	modImplementation gradlefiles.fabricLoaderDependency()
	modRuntimeOnly gradlefiles.fabricApiDependency()
	
	modCompileOnly "mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}"
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.base.archivesName.get()
			
			from gradlefiles.filteredJavaComponent()
			
			pom {
				pom.name = project.base.archivesName.get()
				rootProject.commonPom(it)
			}
		}
	}
}