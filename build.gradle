buildscript {
	repositories {
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
			url = "https://repo.u-team.info"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.0.2", changing: true
		classpath group: "info.u-team.curse_gradle_uploader", name: "curse_gradle_uploader", version: "1.4.1"
	}
}

apply from: "https://gradle-files.u-team.info/default-project.gradle"

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "info.u_team.curse_gradle_uploader"
apply plugin: "maven-publish"

group = "info.u-team"
archivesBaseName = generateArchivesBaseName()
version = generateVersion()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	accessTransformer = file("$rootDir/src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client = {
			workingDirectory project.file("run/client").canonicalPath
			property "mixin.env.disableRefMap", "true"
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest {
					source sourceSets.test
				}
			}
		}
		server = {
			workingDirectory project.file("run/server").canonicalPath
			property "mixin.env.disableRefMap", "true"
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
				
				uteamtest {
					source sourceSets.test
				}
			}
		}
		data = {
			workingDirectory project.file("run/data").canonicalPath
			property "mixin.env.disableRefMap", "true"
			args "--mod", config.mod.modid, "--all", "--output", "\"" + file("src/generated/resources").toString() + "\""
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		data_test = {
			parents data
			workingDirectory project.file("run/data").canonicalPath
			property "mixin.env.disableRefMap", "true"
			args "--mod", "uteamtest", "--all", "--output", "\"" + file("src/generated_test/resources").toString() + "\"", "--validate", "--existing", "\"" + sourceSets.test.resources.srcDirs[0] + "\""
			mods {
				uteamtest {
					source sourceSets.test
				}
			}
		}
	}
}

jar {
	archiveClassifier = ""
	
	from "LICENSE"
	
	exclude(".cache")
	
	manifest normalManifest
}

task deobfJar(type: Jar) {
	archiveClassifier = "dev"
	
	from sourceSets.main.output
	from "LICENSE"
	
	exclude(".cache")
	
	manifest normalManifest
}

task sourcesJar(type: Jar) {
	archiveClassifier = "sources"
	
	from sourceSets.main.allJava
	from "LICENSE"
}

task docJar(type: Jar) {
	archiveClassifier = "javadoc"
	
	from javadoc
	from "LICENSE"
	
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}
}

task testJar(type: Jar) {
	archiveClassifier = "test"
	
	from sourceSets.test.output
	from "LICENSE"
	
	exclude(".cache")
	
	afterEvaluate {
		reobf.create("testJar");
		reobfTestJar.dependsOn createMcpToSrg
		reobfTestJar.setMappings(createMcpToSrg.getOutput())
		reobfTestJar.setClasspath(reobfTestJar.getClasspath().plus(files(jar)))
	}
	
	manifest normalManifest
}

task testDeobfJar(type: Jar) {
	archiveClassifier = "testdev"
	
	from sourceSets.test.output
	from "LICENSE"
	
	exclude(".cache")
	
	manifest normalManifest
}

task testSourcesJar(type: Jar) {
	archiveClassifier = "testsources"
	
	from sourceSets.test.allJava
	from "LICENSE"
}

artifacts {
	archives jar
	archives deobfJar
	archives sourcesJar
	archives docJar
	archives testJar
	archives testDeobfJar
	archives testSourcesJar
}

signAllJars()

sourceSets {
	main {
		java {
			srcDirs += "src/data/java"
			srcDirs += "src/api/java"
			srcDirs += "src/integration/java"
		}
		resources {
			srcDirs += "src/generated/resources"
		}
	}
	test {
		java {
			srcDirs += "src/data_test/java"
			srcDirs += "src/integration_test/java"
		}
		resources {
			srcDirs += "src/generated_test/resources"
		}
	}
}

dependencies {
	minecraft getForgeDependency()
	compileOnly fg.deobf(getJeiApiDependency())
	runtimeOnly fg.deobf(getJeiDependency())
	runtimeOnly fg.deobf(getPatchouliDependency())
}

curseforge {
	afterEvaluate {
		tasks."curseforge${config.curse.id}".onlyIf {
			getValue("token") != null
		}
	}
	
	tasks.curseforge.dependsOn build
	
	apiKey = getValueDefault("token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.forge.mcversion
		addGameVersion "Forge"
		addGameVersion "Java 8"
		addGameVersion "Java 9"
		addGameVersion "Java 10"
		
		relations {
			optionalDependency "basic-discord-rich-presence"
			optionalDependency "jei"
		}
		
		mainArtifact(jar) {
			displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"" + generateChangelogUrl() + "\">Changelog of ${project.version}</a>"
		}
		
		addArtifact(deobfJar) {
			displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}-dev"
			changelogType = "text"
			changelog = "ONLY for development environment!\nMappings: ${config.forge.mapping_channel}_${config.forge.mapping}"
		}
	}
}

tasks.withType(PublishToMavenRepository) {
	onlyIf {
		getValue("mavenpass") != null
	}
}

publishing {
	publish.dependsOn build
	
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = getValue("mavenpass")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact deobfJar
			artifact sourcesJar
			artifact docJar
			artifact testJar
			artifact testDeobfJar
			artifact testSourcesJar
			
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
					developer {
						name = "MrTroble"
					}
				}
			}
		}
	}
}

task uploadBoth {
	tasks.uploadBoth.dependsOn build
	tasks.uploadBoth.dependsOn publish
	tasks.uploadBoth.dependsOn "curseforge${config.curse.id}"
	tasks.uploadBoth.dependsOn setBuildNumber
	doLast {
		println "Published both"
	}
}

gradle.taskGraph.whenReady {
	if (gradle.taskGraph.hasTask(":curseforge${config.curse.id}") || gradle.taskGraph.hasTask(":publish")) {
		validateBuild()
	}
}