plugins {
	id "net.minecraftforge.gradle"
	id "org.parchmentmc.librarian.forgegradle"
	id "org.spongepowered.mixin"
	id "info.u_team.gradle_files"
	id "info.u_team.curse_gradle_uploader"
	id "maven-publish"
}

group = "info.u-team"
archivesBaseName = gradlefiles.archivesBaseName()
version = gradlefiles.version()

gradlefiles {
	vendor "Team UTeam"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping

	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

	runs {
		client {
			workingDirectory file("run/client")

			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}

				uteamtest {
					source sourceSets.test
				}
			}
		}
		server {
			workingDirectory file("run/server")

			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}

				uteamtest {
					source sourceSets.test
				}
			}
		}
	}
}

minecraft.getRuns().each { task ->
	task.environment "MC_VERSION", "{mc_version}"
}

tasks.register("testJar", Jar) {
	archiveClassifier = "test"
	
	from sourceSets.test.output
}

gradlefiles.createReobfJar(tasks.getByName("testJar"))

tasks.create("testSourcesJar", Jar) {
	archiveClassifier = "testsources"
	
	from sourceSets.test.allJava
}

gradlefiles.assembleDependOn(tasks.getByName("testJar"), tasks.getByName("testSourcesJar"))

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
	task.manifest {
		attributes("FMLAT": "accesstransformer.cfg")
	}
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

tasks.register("prepareSources", Copy) {
	from sourceSets.main.java
	into file("${buildDir}/prepareSources")
	filter (org.apache.tools.ant.filters.ReplaceTokens, tokens: [
		"VERSION": project.version.toString(),
		"MCVERSION": config.minecraft.version.toString()
	])
	outputs.upToDateWhen { false }
}

tasks.named("compileJava").configure { task ->
	final def prepareResources = tasks.named("prepareSources")
	task.dependsOn prepareResources
	task.source = prepareResources.get().destinationDir
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", config.minecraft.version

	filesMatching("mcmod.info") {
		expand "version": project.version, "mcversion": config.minecraft.version
	}
}

gradlefiles.signDefaultForgeJar()
gradlefiles.signJar("reobfTestJar")

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs += "src/repack/java"
		}
		resources {
			srcDirs += "src/repack/resources"
		}
	}
	test {
		java
		resources
	}
}

repositories {
	maven {
		url = "https://maven.blamejared.com"
	}
}

dependencies {
	minecraft gradlefiles.forgeDependency()
	
	runtimeOnly fg.deobf("mezz.jei:jei_${config.minecraft.version}:${config.jei.version}")
}

curseforge {
	apiKey = defaultPropertyValue("curseforge.token")

	project {
		id = config.curse.id
		releaseType = config.curse.type

		addGameVersion config.minecraft.version
		addGameVersion "Forge"
		addGameVersion "Java 8"

		relations {
			optionalDependency "jei"
		}

		mainArtifact(tasks.getByName("jar")) {
			displayName = "${config.curse.display}-${config.minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${gradlefiles.changelogUrl()}\">Changelog of ${project.version}</a>"
		}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName

			from components.java
			artifact tasks.getByName("testJar")
			artifact tasks.getByName("testSourcesJar")

			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
					developer {
						name = "MrTroble"
					}
				}
			}
		}
	}
}